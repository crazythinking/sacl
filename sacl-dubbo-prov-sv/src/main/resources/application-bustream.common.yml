spring:
  cloud:
#    bus:
#      ack:
#        enabled: true
#      enabled: true
#      env:
#        enabled: false
#      refresh:
#        enabled: false
#      trace:
#        enabled: true
    stream:
      binders:
        rabbitCluster:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                addresses: ${spring.rabbitmq.addresses}
                cache:
                  channel:
                    checkout-timeout: 1s
                  connection:
                    mode: channel
                connection-timeout: 3s
                password: ${spring.rabbitmq.password}
                username: ${spring.rabbitmq.username}
                virtual-host: ${spring.rabbitmq.virtual-host}
      default-binder: rabbitCluster
      #属于特定于RabbitMq的Binding,不是通用的,如果涉及到mq的转换则不可用; 同样以key的方式指定配置，默认为default
      rabbit:
        bindings:
          pollableInput:
            consumer:
              acknowledgeMode: AUTO
              ttl: 20000 # ms, 默认不做限制, 消息在队列中最大的存活时间; 当消息滞留超过ttl时会被当成消费失败消息, 即会被转发到死信队列或丢弃
              autoBindDlq: true # 是否自动声明死信队列(DLQ)并将其绑定到死信交换机(DLX),默认是false
          springCloudBusOutput:
            producer:
              exchangeType: topic # 指定Exchange类型
#              routingKeyExpression: headers.type # 生产者配置RabbitMq的动态路由键, 需要在生产者端组装消息时指定headers.type的值
#              routingKeyExpression: ‘’‘testKey1’‘’ # 固定的routing key值
          springCloudBusInput: # binding的key为springCloudBusInput
            consumer:
              acknowledgeMode: AUTO
#              bindingRoutingKey: testKey1 # 将queue绑定到exchange时使用的routing key。默认'#'
#              # 以下配置只用于死信
              ttl: 20000 # ms, 默认不做限制, 消息在队列中最大的存活时间; 当消息滞留超过ttl时会被当成消费失败消息, 即会被转发到死信队列或丢弃
              autoBindDlq: true # 是否自动声明死信队列(DLQ)并将其绑定到死信交换机(DLX),默认是false
#              deadLetterExchange: ${spring.application.name}.DLX # 默认prefix+DLX, DLX的名称,prefix默认为空
#              deadLetterQueueName: ${spring.cloud.stream.rabbit.bindings.springCloudBusInput.consumer.deadLetterExchange}.dlq
#              deadLetterRoutingKey: 'packetUplinkDlxTopic.scas-data-collection.dlx' # 默认destination + group
#              dlqExpires: 30000 # 队列所有 customer 下线, 且在过期时间段内 queue 没有被重新声明, 多久之后队列会被销毁, 注意, 不管队列内有没有消息. 默认不设置
#              dlqLazy: false # 是否声明为惰性队列（Lazy Queue）.默认false
#              dlqMaxLength: 100000 # 队列中消息数量的最大限制. 默认不限制
#              dlqMaxLengthBytes: 100000000 # 队列所有消息总字节的最大限制. 默认不限制
#              dlqMaxPriority: 255 # 队列的消息可以设置的最大优先级. 默认不设置
#              dlqTtl: 1000000 # 队列的消息的过期时间. 默认不限制
#              republishToDlq: true # 默认false。当为true时，死信队列接收到的消息的headers会更加丰富，多了异常信息和堆栈跟踪
#              republishDeliveryMode: DeliveryMode.PERSISTENT # 默认DeliveryMode.PERSISTENT（持久化）。当republishToDlq为true时，转发的消息的delivery mode
      bindings:
#        input: # binding的key为input
#          binder: rabbitCluster
#          destination: sacl.exchange1
#          group: saclGroup
#          contentType: application/json
#          consumer:
#            maxAttempts: 3 # 当消息消费失败时，尝试消费该消息的最大次数（消息消费失败后，发布者会重新投递）。默认3
#            backOffInitialInterval: 1000 # 消息消费失败后重试消费消息的初始化间隔时间。默认1s，即第一次重试消费会在1s后进行
#            backOffMultiplier: 2 # 相邻两次重试之间的间隔时间的倍数。默认2，即第二次是第一次间隔时间的2倍，第三次是第二次的2倍
#            backOffMaxInterval: 10000 # 下一次尝试重试的最大时间间隔，默认为10000ms，即10s
#        output: # binding的key为output
#          binder: rabbitCluster
#          destination: sacl.exchange2
#          group: saclGroup
#          contentType: application/json
        pollableInput:
          destination: sacl-online-sv.exchange1 # exchange 用生产者的applicationName做前缀
          group: pollMakeLoan # queue的后缀,带业务含义
          contentType: application/json
          consumer:
            maxAttempts: 3 # 当消息消费失败时，尝试消费该消息的最大次数（消息消费失败后，发布者会重新投递）。默认3
            backOffInitialInterval: 1000 # 消息消费失败后重试消费消息的初始化间隔时间。默认1s，即第一次重试消费会在1s后进行
            backOffMultiplier: 2 # 相邻两次重试之间的间隔时间的倍数。默认2，即第二次是第一次间隔时间的2倍，第三次是第二次的2倍
            backOffMaxInterval: 10000 # 下一次尝试重试的最大时间间隔，默认为10000ms，即10s
        springCloudBusInput:
#          binder: rabbitCluster
          destination: sacl-online-sv.exchange1 # exchange 用生产者的applicationName做前缀
          group: makeLoan # queue的后缀,带业务含义
          contentType: application/json
          consumer:
            maxAttempts: 3 # 当消息消费失败时，尝试消费该消息的最大次数（消息消费失败后，发布者会重新投递）。默认3
            backOffInitialInterval: 1000 # 消息消费失败后重试消费消息的初始化间隔时间。默认1s，即第一次重试消费会在1s后进行
            backOffMultiplier: 2 # 相邻两次重试之间的间隔时间的倍数。默认2，即第二次是第一次间隔时间的2倍，第三次是第二次的2倍
            backOffMaxInterval: 10000 # 下一次尝试重试的最大时间间隔，默认为10000ms，即10s
        springCloudBusOutput:
          destination: ${spring.application.name}.exchange1 # exchange的前缀,生产者的applicationName
          group: repayBack # queue的后缀,带业务含义
          contentType: application/json
